{
  "_from": "start",
  "_id": "start@5.1.0",
  "_inBundle": false,
  "_integrity": "sha1-HBcfDvlIf1bQq5p1Ws6GAWkgh2M=",
  "_location": "/start",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "start",
    "fetchSpec": "latest",
    "name": "start",
    "raw": "start",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/start/-/start-5.1.0.tgz",
  "_shasum": "1c171f0ef9487f56d0ab9a755ace860169208763",
  "_spec": "start",
  "_where": "/var/www/front/temp",
  "author": {
    "email": "kir@soulshine.in",
    "name": "Kir Belevich",
    "url": "https://github.com/deepsweet"
  },
  "bugs": {
    "url": "https://github.com/start-runner/start/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Highly composable and modular Nodejs tasks runner for the new functional JS era",
  "devDependencies": {
    "babel-preset-start": "^0.1.0",
    "eslint-config-tough": "^0.3.2",
    "husky": "^0.12.0",
    "sinon": "^1.17.5",
    "start-babel-cli": "^4.0.0",
    "start-start-preset": "^3.0.0",
    "tape": "^4.6.0"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "build/"
  ],
  "homepage": "https://github.com/start-runner/start",
  "keywords": [
    "runner",
    "start",
    "tasks"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "name": "start",
  "optionalDependencies": {},
  "readme": "# start\n\n[![npm](https://img.shields.io/npm/v/start.svg?style=flat-square)](https://www.npmjs.com/package/start)\n[![linux build](https://img.shields.io/travis/start-runner/start/master.svg?label=linux&style=flat-square)](https://travis-ci.org/start-runner/start)\n[![windows build](https://img.shields.io/appveyor/ci/start-runner/start/master.svg?label=windows&style=flat-square)](https://ci.appveyor.com/project/start-runner/start)\n[![coverage](https://img.shields.io/codecov/c/github/start-runner/start/master.svg?style=flat-square)](https://codecov.io/github/start-runner/start)\n[![deps](https://img.shields.io/gemnasium/start-runner/start.svg?style=flat-square)](https://gemnasium.com/start-runner/start)\n\n<img src=\"logo.png\" width=\"100\" height=\"100\" align=\"right\" alt=\"logo\"/>\n\n* highly composable and modular\n* shareable tasks presets\n* Higher-Order Functions and Promises\n* really [dead simple](lib/index.js)\n\n## TOC\n\n* [Install](#install)\n* [Tasks](#tasks-file)\n* [CLI](#cli)\n  * [NPM scripts](#npm-scripts)\n  * [Presets](#presets)\n* [API](#api)\n  * [Reporter](#reporter)\n  * [Task](#task)\n* [Advanced usage](#advanced-usage)\n* [FAQ](#faq)\n* [Copyrights](#copyrights)\n\n## Install\n\n```sh\nnpm i -S start\n# or\nyarn add start\n```\n\n## Tasks file\n\n```js\n// tasks.js\nimport Start from 'start';\nimport reporter from 'start-pretty-reporter';\nimport env from 'start-env';\nimport files from 'start-files';\nimport watch from 'start-watch';\nimport clean from 'start-clean';\nimport read from 'start-read';\nimport babel from 'start-babel';\nimport write from 'start-write';\nimport eslint from 'start-eslint';\nimport mocha from 'start-mocha';\nimport * as istanbul from 'start-istanbul';\nimport codecov from 'start-codecov';\n\nconst start = Start(reporter());\n\nexport const build = () => start(\n  env('NODE_ENV', 'production'),\n  files('build/'),\n  clean(),\n  files('lib/**/*.js'),\n  read(),\n  babel(),\n  write('build/')\n);\n\nexport const dev = () => start(\n  env('NODE_ENV', 'development'),\n  files('build/'),\n  clean(),\n  files('lib/**/*.js'),\n  watch((file) => start(\n    files(file),\n    read(),\n    babel(),\n    write('build/')\n  ))\n);\n\nexport const lint = () => start(\n  files([ 'lib/**/*.js', 'test/**/*.js' ]),\n  eslint()\n);\n\nexport const test = () => start(\n  env('NODE_ENV', 'test'),\n  files('test/**/*.js'),\n  mocha()\n);\n\nexport tdd = () => start(\n  files([ 'lib/**/*.js', 'test/**/*.js' ]),\n  watch(test)\n);\n\nexport coverage = () => start(\n  env('NODE_ENV', 'test'),\n  files('coverage/'),\n  clean(),\n  files('lib/**/*.js'),\n  istanbul.instrument(),\n  test,\n  istanbul.report()\n);\n\nexport ci = () => start(\n  lint,\n  coverage,\n  files('coverage/lcov.info'),\n  read(),\n  codecov()\n);\n```\n\nEach named export return a Promise – \"tasks runner\" – sequence of tasks managed by `start`, which will run them one by one passing data through until an error occurs. As you can see tasks runners can be nested in each other to achieve great reusability.\n\nYou can run it manually:\n\n```js\nbuild()\n  .then((data) => {\n    console.log('ok:', data);\n  })\n  .catch((error) => {\n    console.error('not ok:', error);\n  });\n```\n\nOr you can use an external CLI:\n\n## CLI\n\n```sh\nnpm i -D start-simple-cli\n# or\nyarn add --dev start-simple-cli\n```\n\n```\n  Usage: index [options] <tasks runner> [arguments]\n\n  Options:\n\n    -h, --help              output usage information\n    -f, --file, <file>      tasks file path, tasks.js by default\n    -p, --preset, <preset>  tasks preset\n```\n\nBrowse [available CLIs](https://www.npmjs.com/browse/keyword/start-cli).\n\n### NPM scripts\n\nFor example for `tasks.js` listed above, transpiling with Babel:\n\n```sh\nnpm i -D start-babel-cli\n# or\nyarn add --dev start-babel-cli\n```\n\n```js\n// package.json\n\"scripts\": {\n  \"start\": \"start-runner -f tasks.js\"\n}\n```\n\nAnd your available commands are:\n\n```sh\nnpm start build\nnpm start dev\nnpm start lint\nnpm start test\nnpm start tdd\nnpm start coverage\nnpm start ci\n# or\nyarn start build\nyarn start dev\nyarn start lint\nyarn start test\nyarn start tdd\nyarn start coverage\nyarn start ci\n```\n\nSee [NPM documentation](https://docs.npmjs.com/cli/start) for details.\n\n### Presets\n\nYou can make your tasks file (and its dependencies!) completely external and shareable. Like a `start-my-es6-preset` package for a bunch of your similar projects. See [start-start-preset](https://github.com/start-runner/start-preset) as an example and browse [available presets](https://www.npmjs.com/browse/keyword/start-preset).\n\n```js\n// package.json\n\"scripts\": {\n  \"start\": \"start-runner -p start-my-es6-preset\"\n}\n```\n\n## API\n\n```js\nstart(reporter())(\n  task1(),\n  task2(),\n  ...\n);\n```\n\n### Reporter\n\nReporter is an external function which prints the results of running tasks.\n\nThe simplest dummy reporter can be represented as following:\n\n```js\nexport default (params) => (name, type, message) => {\n  console.log(name, type, message);\n};\n```\n\n#### `(params)`\n\nFirst function call made by user. `params` can be options object, multiple arguments or whatever your reporter needs to be configured and initialized.\n\n#### `(name, type, message)`\n\nSecond function call made by `start`:\n\n* `name` – task name\n* `type` – log type:\n  * `start`\n  * `info` – must come with `message`\n  * `resolve`\n  * `error` – may come with `message`\n* `message` – may be undefined, string, array of strings or instance of Error\n\nSee [start-simple-reporter](https://github.com/start-runner/simple-reporter) as an example and browse [available reporters](https://www.npmjs.com/browse/keyword/start-reporter).\n\n### Task\n\nThe simplest dummy task can be represented as following:\n\n```js\nexport default (params) => (input) => {\n  return function taskName(log, reporter) {\n    const cats = require('cats-names');\n\n    log(cats.random());\n\n    return Promise.resolve(input);\n  };\n};\n```\n\n#### `(params)`\n\nFirst function call made by user. `params` can be options object, multiple arguments or whatever your task needs to be configured and initialized.\n\n#### `(input)`\n\nSecond function call made by `start` with the result of previous task in chain. It's a good idea to pass the `input` data through if your task doesn't modify it.\n\nTasks like [start-tape](https://github.com/start-runner/tape) relies on array of files paths. This can be provided by [start-files](https://github.com/start-runner/files):\n\n```js\nstart(\n  files('tests/**/*.js'),\n  tape()\n)\n```\n\n`input`:\n\n```js\n[\n  '/absolute/path/file1.js',\n  '/absolute/path/file2.js'\n]\n```\n\nTasks like [start-babel](https://github.com/start-runner/babel) relies on files data and optional source maps. This can be provided by [start-read](https://github.com/start-runner/read) or other tasks which works with data:\n\n```js\nstart(\n  files('lib/**/*.js'),\n  read(),\n  babel()\n)\n```\n\n`input`:\n\n```js\n[\n  {\n    path: '/absolute/path/file1.js',\n    data: '…',\n    map: '…'\n  },\n  {\n    path: '/absolute/path/file2.js',\n    data: '…',\n    map: null\n  }\n]\n```\n\nAnd finally [start-write](https://github.com/start-runner/read) may output files data along with source maps:\n\n```js\nstart(\n  files('lib/**/*.js'),\n  read(),\n  babel({ sourceMaps: true }),\n  write('build/')\n)\n```\n\n#### `taskName(log, reporter)`\n\nThird function call made by `start`.\n\n* `taskName` – will be used as task name for logging\n* `log` – function which is bound to `reporter(name, 'info')`, so if your task has something to say expect errors then you have to call `log` with message (or array of messages)\n* `reporter` – original reporter, enables creating advanced tasks runners, see [start-concurrent](https://github.com/start-runner/concurrent) as an example\n\n#### `require`\n\nIt's a good idea to \"lazyload\" your dependencies inside a task scope instead of requiring them at the very top. [Execution time can be a problem](https://github.com/gulpjs/gulp/issues/632), and there is no need to require all the heavy dependencies while cleaning a single directory (for example).\n\n#### `return`\n\nAnd finally, your task must return an ES6 Promise. It can be resolved with data which will be passed to the next Promise in chain, or rejected with some message (or array of messages).\n\nBrowse [available tasks](https://www.npmjs.com/browse/keyword/start-task).\n\n## Advanced usage\n\n### Pass arguments to tasks through CLI\n\n```js\nexport const build = (arg1, arg2) => start(\n  task1(arg1), // 'lib/**/*.js'\n  task2(arg2) // 'hi'\n);\n\n```\n\n```sh\nnpm start build 'lib/**/*.js' 'hi'\n# or\nyarn start build 'lib/**/*.js' 'hi'\n```\n\n### Pass arguments to nested tasks runners\n\n```js\nexport const test = (arg) => start(\n  task1(arg) // 'hi'\n);\n\nexport const coverage = () => start(\n  tas2k(),\n  () => test('hi'),\n  task3()\n);\n\n```\n\n### Pass output data to nested tasks runners\n\n```js\nimport Start from 'start';\nimport reporter from 'start-pretty-reporter';\nimport files from 'start-files';\nimport inputConnector from 'start-input-connector';\nimport eslint from 'start-eslint';\n\nconst start = Start(reporter());\n\nconst lint = (input) => start(\n  inputConnector(input),\n  eslint()\n);\n\nexport const lintLib = () => start(\n  files([ 'lib/**/*.js' ]),\n  lint\n);\n\nexport const lintTest = () => start(\n  files([ 'test/**/*.js' ]),\n  lint\n);\n```\n\n## FAQ\n\n### Why do I need yet another tasks runner in 2k17 if I already have…\n\n#### …Webpack?\n\nWebpack is a \"module bundler\", not a tasks runner. Despite the fact that you may have some tricky tasks-plugins and can even lint files or clean folders with Webpack, in my opinion it's not a good idea. A great tool becomes a hulking \"swiss-knife\", in a bad way.\n\n> Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new \"features\".\n\n[Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy). So better let Webpack just to bundle modules, he knows how to do it well.\n\nAlso, you still need to somehow run Webpack itself. [start-webpack](https://github.com/start-runner/webpack) :) Start can't and shouldn't replace any kind of smart module bundlers. It's more a low-level abstraction, something like Makefile.\n\n#### …NPM scripts?\n\nI know, I know. You don't need any runners because NPM scripts can solve all the common tasks. I thought that too. But then I began to write more and more complex NPM scripts. And pre-scripts. And post-scripts. And scripts `like:that`. And still had a lot of `&&`. After that I began to worry about Windows, because I should be a good person, so I had to install `cross-env`. And `rimraf`. And `cli -i -s --tot ally -i n,c,o, -n=s -- istent`. Try to use `--long-but-understandable-after-2-months` options and your NPM script will be 2 screens width.\n\n `(╯°□°）╯︵ ┻━┻`.\n\nYou already know JavaScript, so use it. API over CLI just because it's cool.\n\n#### …Grunt/Gulp?\n\nIt's more a matter of taste. And [\"spirit of the age\"](https://en.wikipedia.org/wiki/Zeitgeist). If you are totally fine with Grunt/Gulp then most likely there is no any need to change your workflow.\n\n### Whoa! :scream_cat: What a great idea. I want more.\n\nSure :sunglasses:\n\n* [webpack-blocks](https://github.com/andywer/webpack-blocks) for your Webpack config\n* [recompose](https://github.com/acdlite/recompose) for your React components\n\n## Copyrights\n\nThis software is released under the terms of the [MIT License](license.md).\n\nThe font used in logo is [supernova fat](http://www.ffonts.net/supernova-fat.font).\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/start-runner/start.git"
  },
  "scripts": {
    "prepublish": "yarn start build",
    "prepush": "yarn start prepush",
    "start": "start-runner -p start-start-preset"
  },
  "version": "5.1.0"
}
